package org.zerock.service;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.zerock.domain.CarVO;
import org.zerock.domain.RecallVO;
import org.zerock.mapper.RecallDataMapper;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.java.Log;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class GetRecallDataServiceImpl implements GetRecallDataService {

	@Autowired
	private RecallDataMapper recallDataMapper;
	
	// 한국교통안전공단_자동차결함리콜  데이터 받고 db의 recall_table에 추가
	@Override
	public void getRecallData() throws Exception{
		
			int perPage =1;
			int totalCount=0;
			String data;
			
			while(true) {
				 // 호출할 url(쿼리 x)
				StringBuilder urlBuilder = new StringBuilder("http://api.odcloud.kr/api/3048950/v1/uddi:a8f35a10-4a6b-4ee6-b3a3-b2949d6287fd");
				//url에 쿼리 추가 
				urlBuilder.append("?page=1");
				urlBuilder.append("&perPage="+Integer.toString(perPage));
				urlBuilder.append("&serviceKey=HWXD%2BBeBRR%2FFOn%2Bs2jxKre%2FP511RFDfO3KcErF3kx1GyrS8rLtyqzTmk6v9anvUdtoKANN74B0r6GizYleBOIA%3D%3D");
				
				//URL 생성 
				URL url = new URL(urlBuilder.toString());
				
				//커넥션 get, 헤더 설정 
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setRequestMethod("GET");
		        conn.setRequestProperty("Content-type", "application/json");
				
		        // 요청 후 data 받기 
		        System.out.println("Response code: " + conn.getResponseCode());
		        System.out.println("totalCount : " + totalCount);
		        System.out.println("perPage : " + perPage);
		        BufferedReader rd;
		        if(conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
		            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		        } else {
		            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
		        }
		        StringBuilder sb = new StringBuilder();
		        String line;
		        while ((line = rd.readLine()) != null) {
		            sb.append(line);
		        }
		        rd.close();
	        conn.disconnect();
	        
	         data = sb.toString(); //요청을 통해 받은 data String으로 변환
			
	         //요청을 통해 받은 데이터 json 객체로 변환 
	         try {
//	        	 log.info(data);
	 			ObjectMapper objectMapper = new ObjectMapper();
	 			JsonNode rootNode = objectMapper.readTree(data);
	 			JsonNode dataNode = rootNode.get("data");
	 			
	 			
	 			//data에서 리콜 별로 나눠서 List에 저장 후 mapper에 전달 
	 			//데이터의 전체 개수 파악 후 진행
	 			if(perPage == totalCount) {
	 				ArrayList<RecallVO> nodeList = new ArrayList<RecallVO>();
	 				for(JsonNode node :dataNode) {
	 					RecallVO recallPost = new RecallVO();
	 					recallPost.setRecallDate(node.get("리콜개시일").asText());
	 					recallPost.setRecallReason(node.get("리콜사유").asText());
	 					recallPost.setToDate(node.get("생산기간(까지)").asText());
	 					recallPost.setFromDate(node.get("생산기간(부터)").asText());
	 					recallPost.setBrand(node.get("제작자").asText());
	 					recallPost.setCarName(node.get("차명").asText());
	 					nodeList.add(recallPost);
	 				}
//	 				log.info("nodeList================");
//	 				for(RecallVO recall: nodeList){
//	 					log.info("\n"+"node:"+"\n"+recall.getBrand()+"\n"+recall.getCarName()
//	 					+"\n"+recall.getFromDate()+"\n"+recall.getToDate()+"\n"+recall.getRecallDate()
//	 					+"\n"+recall.getRecallReason());
//	 					
//	 				}
	 				recallDataMapper.insertRecallData(nodeList);
	 				log.info("mapper 전달 완료");
	 			}
	 			
	 			// 총 데이터 개수(테스트 시 데이터가 너무 많으면 실행 안되므로 임의의 상수값 적용 후 테스트 
	 			totalCount = (int)Integer.valueOf(rootNode.get("totalCount").asText());
	 			//totalCount =2; 
	 			
	 		}catch(Exception e) {
	 			e.getMessage();
	 		}
				if(perPage == totalCount){ 
					break;
				}
				perPage =totalCount;
				
			}// while문 끝 		
			
	}

	
	// recall_table과 car_table 비교하여 신규차량 car_table에 등록
	@Override
	public void insertNewCarToCarTable() {
	    ArrayList<CarVO> newCarList = new ArrayList<>();
	    
	    try {
	        // 1. 새로운 자동차 목록 가져오기
	        newCarList = recallDataMapper.compareCarTableWithRecallTable();

	        // 2. 새로운 자동차 목록이 비어있지 않은 경우에만 테이블에 삽입 수행
	        if (!newCarList.isEmpty()) {
	            recallDataMapper.insertNewCarsToCarTable(newCarList);
	         
	        }
	        int carCount = newCarList.size();
	        for (CarVO car : newCarList) {
	            log.info(car.toString());
	        }
	        log.info("신규 차량 대수: " +carCount);
	    } catch (Exception e) {
	        log.error("Error occurred: " + e.getMessage(), e);
	    }


	}

	
	// select 메뉴를 통해 검색한 recall 게시물 반환 
	@Override
	public ArrayList<RecallVO> getRecallPosts(String brand, String carName, String fromDate){
		recallDataMapper.getRecallPosts(brand, carName, fromDate);
	}
	
	}

	



